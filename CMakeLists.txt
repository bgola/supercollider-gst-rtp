####################################################################################################
# CMakeLists file for GstRTP
# Generated by Bruno Gola
# 2023-06-06
####################################################################################################

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.12)
set(project_name "GstRTP")
set(dest_dir ${project_name})

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 17)

include(CMakePrintHelpers)

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH
    "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

find_package(PkgConfig)

#find_package(GStreamer REQUIRED)

#find_library(CUSTOM_GLIB NAMES glib-2.0 PATHS "${CMAKE_PREFIX_PATH}")
#find_library(CUSTOM_GSTREAMER NAMES gstreamer-1.0 PATHS "${CMAKE_PREFIX_PATH}")
#find_library(CUSTOM_GSTREAMER_APP NAMES gstreamer-app-1.0 PATHS "${CMAKE_PREFIX_PATH}")

#if (CUSTOM_GSTREAMER)
#  set(GSTREAMER_SO "")
#  if (LINUX)
#    file(GLOB GSTREAMER_SO
#      "${GSTREAMER_INSTALL_PREFIX}/lib/libgst.*"
#      "${GSTREAMER_INSTALL_PREFIX}/lib/libgstapp.*"
#      )
#    set(CMAKE_INSTALL_RPATH "$ORIGIN/ignore")
#  elseif (APPLE)
#    file(GLOB GSTREAMER_SO "${GSTREAMER_INSTALL_PREFIX}/lib/*.dylib")
#    set(CMAKE_INSTALL_RPATH "@loader_path/ignore")
#  elseif (MSVC)
#    file(GLOB GSTREAMER_SO "${GSTREAMER_INSTALL_PREFIX}/lib/*.dll")
#  endif()
#
#  if (TORCH_SO)
#    message("> FOUND custom GStreamer, libraries will be copied: " "${TORCH_SO}")
#    install(FILES ${TORCH_SO} DESTINATION "${dest_dir}/ignore")
#  endif()
#endif()

#pkg_search_module(GLIB REQUIRED glib-2.0) 
#pkg_check_modules(GSTREAMER REQUIRED gstreamer-1.0)
#pkg_check_modules(GSTREAMER REQUIRED gstreamer-app-1.0)

#pkg_check_modules(GST REQUIRED glib-2.0>=2.4
#                           gstreamer-1.0>=1.4
#                            gstreamer-app-1.0>=1.4)

#target_include_directories("GstRTP" PUBLIC ${GST_INCLUDE_DIRS})
#target_link_libraries("GstRTP" PUBLIC ${GST_LIBRARIES})

####################################################################################################
# Begin target GstRTP

set(GstRTP_cpp_files
    plugins/GstRTP/GstRTP.cpp
    plugins/GstRTP/GstRTP.hpp
)
set(GstRTP_sc_files
    plugins/GstRTP/GstRTP.sc
)
set(GstRTP_schelp_files
    plugins/GstRTP/GstRTP.schelp
)

sc_add_server_plugin(
    "GstRTP/GstRTP" # desination directory
    "GstRTP" # target name
    "${GstRTP_cpp_files}"
    "${GstRTP_sc_files}"
    "${GstRTP_schelp_files}"
)


# End target GstRTP
####################################################################################################

####################################################################################################
# END PLUGIN TARGET DEFINITION
####################################################################################################

message(STATUS "Generating plugin targets done")
